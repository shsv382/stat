{"version":3,"sources":["App.js","actions.js","serviceWorker.js","reducers.js","index.js"],"names":["App","_this$props","this","props","A_CC","A_C","A_HC","I_CC","I_C","I_HC","react_default","a","createElement","className","onClick","onDoubleClick","id","Component","connect","state","dispatch","event","type","payload","target","Boolean","window","location","hostname","match","initialState","store","createStore","arguments","length","undefined","action","newState","Object","assign","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b0eedffe.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport { increment, decrement } from './actions';\n\nconst mapStateToProps = (state) => {\n  return {\n    A_CC: state.A_CC,\n    A_C:  state.A_C,\n    A_HC: state.A_HC,\n    I_CC: state.I_CC,\n    I_C:  state.I_C,\n    I_HC: state.I_HC\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onClick: (event) => dispatch(increment(event)),\n    onDoubleClick: (event) => dispatch(decrement(event))\n  }\n}\n\nclass App extends Component {\n  render() {\n    const {A_CC, A_C, A_HC, I_CC, I_C, I_HC} = this.props;\n\n    return (\n      <div className=\"App\">\n          <div className=\"button\">A</div> <div className=\"button\">I</div>\n          <div className=\"button\" onClick={this.props.onClick} onDoubleClick={this.props.onDoubleClick} id=\"A_CC\">{A_CC}</div>\n          <div className=\"button\" onClick={this.props.onClick} onDoubleClick={this.props.onDoubleClick} id=\"I_CC\">{I_CC}</div>\n          <div className=\"button\" onClick={this.props.onClick} onDoubleClick={this.props.onDoubleClick} id=\"A_C\" >{A_C }</div>\n          <div className=\"button\" onClick={this.props.onClick} onDoubleClick={this.props.onDoubleClick} id=\"I_C\" >{I_C }</div>\n          <div className=\"button\" onClick={this.props.onClick} onDoubleClick={this.props.onDoubleClick} id=\"A_HC\">{A_HC}</div>\n          <div className=\"button\" onClick={this.props.onClick} onDoubleClick={this.props.onDoubleClick} id=\"I_HC\">{I_HC}</div>\n          <div>total:</div> <div>{A_CC+A_C+A_HC+I_CC+I_C+I_HC}</div> <div></div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const increment = (e) => ({\n\ttype: 'ADD',\n\tpayload: e.target\n});\n\nexport const decrement = (e) => ({\n\ttype: 'DEL',\n\tpayload: e.target\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n\tA_CC: 0,\n\tA_C:  0,\n\tA_HC: 0,\n\tI_CC: 0,\n\tI_C:  0,\n\tI_HC: 0\n}\n\nexport const incrementation = (state=initialState, action={}) => {\n\tlet newState = state;\n\tswitch(action.type) {\n\t\tcase 'ADD':\n\t\t\tnewState[action.payload.id] += 1;\n\t\t\treturn Object.assign({}, state, Object.assign({}, newState));\n\t\tcase 'DEL':\n\t\t\tnewState[action.payload.id] -= 1;\n\t\t\treturn Object.assign({}, state, Object.assign({}, newState));\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { incrementation } from './reducers';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(incrementation);\n\nReactDOM.render(<Provider store={ store }>\n\t\t\t\t\t<App />\n\t\t\t\t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}